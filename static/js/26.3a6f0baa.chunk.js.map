{"version":3,"sources":["shared/components/ColoredButton.js","shared/components/DialogTitleWithCloseIcon.js","shared/components/FormDialog.js","logged_in/components/subscription/stripe/StripeTextField.js","logged_in/components/subscription/stripe/StripeCardForm.js","logged_in/components/subscription/stripe/StripeIBANForm.js","logged_in/components/subscription/AddBalanceDialog.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_mui_material__WEBPACK_IMPORTED_MODULE_1__","_mui_material__WEBPACK_IMPORTED_MODULE_2__","_mui_material__WEBPACK_IMPORTED_MODULE_3__","_mui_material__WEBPACK_IMPORTED_MODULE_4__","_mui_material__WEBPACK_IMPORTED_MODULE_5__","memo","props","color","children","theme","buttonTheme","createTheme","adaptV4Theme","palette","primary","main","buttonProps","_ref","o","React","createElement","StyledEngineProvider","injectFirst","ThemeProvider","Button","Object","assign","withTheme","paddingBottom","onClose","disabled","title","disablePadding","DialogTitle","style","spacing","paddingLeft","paddingRight","paddingTop","width","Box","display","justifyContent","Typography","variant","IconButton","onClick","marginRight","marginTop","aria-label","size","CloseIcon","withStyles","dialogPaper","flexDirection","alignItems","maxWidth","actions","dialogPaperScrollPaper","maxHeight","dialogContent","classes","open","loading","headline","onFormSubmit","content","hideBackdrop","Dialog","disableEscapeKeyDown","paper","paperScrollPaper","DialogTitleWithCloseIcon","DialogContent","className","onSubmit","stripeOptions","StripeElement","select","rest","options","base","typography","body1","text","fontSize","fontSmoothing","::placeholder","secondary","invalid","iconColor","error","TextField","InputLabelProps","shrink","inputProps","component","StripeCardForm","stripeError","setStripeError","amount","amountError","onAmountChange","name","setName","Grid","container","item","xs","margin","required","label","value","onChange","event","target","fullWidth","autoFocus","autoComplete","type","parseInt","helperText","InputProps","startAdornment","InputAdornment","position","StripeTextField","CardElement","StripeIBANForm","email","setEmail","IbanElement","supportedCountries","stripePromise","loadStripe","paymentOptions","AddBalanceDialog","onSuccess","setLoading","useState","paymentOption","setPaymentOption","setAmount","setAmountError","elements","useElements","stripe","useStripe","FormDialog","async","preventDefault","createPaymentMethod","getStripePaymentInfo","card","getElement","billing_details","sepa_debit","Error","message","pb","mb","map","option","key","ColoredButton","disableElevation","common","black","renderPaymentComponent","Fragment","HighlightedInformation","StripeIbanForm","ButtonCircularProgress","Wrapper","Elements"],"mappings":"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","file":"static/js/26.3a6f0baa.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createTheme, ThemeProvider, StyledEngineProvider, adaptV4Theme } from \"@mui/material\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createTheme(adaptV4Theme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  }));\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={buttonTheme}>\n        <Button {...buttonProps} color=\"primary\">\n          {children}\n        </Button>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { IconButton, DialogTitle, Typography, Box } from \"@mui/material\";\nimport withTheme from '@mui/styles/withTheme';\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nfunction DialogTitleWithCloseIcon(props) {\n  const {\n    theme,\n    paddingBottom,\n    onClose,\n    disabled,\n    title,\n    disablePadding\n  } = props;\n  return (\n    <DialogTitle\n      style={{\n        paddingBottom: paddingBottom\n          ? paddingBottom && disablePadding\n            ? 0\n            : paddingBottom\n          : theme.spacing(3),\n        paddingLeft: disablePadding ? 0 : null,\n        paddingRight: disablePadding ? 0 : null,\n        paddingTop: disablePadding ? 0 : theme.spacing(2),\n        width: \"100%\"\n      }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h5\">{title}</Typography>\n        <IconButton\n          onClick={onClose}\n          style={{ marginRight: -12, marginTop: -10 }}\n          disabled={disabled}\n          aria-label=\"Close\"\n          size=\"large\">\n          <CloseIcon />\n        </IconButton>\n      </Box>\n    </DialogTitle>\n  );\n}\n\nDialogTitleWithCloseIcon.propTypes = {\n  theme: PropTypes.object,\n  paddingBottom: PropTypes.number,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  title: PropTypes.string,\n  disablePadding: PropTypes.bool\n};\n\nexport default withTheme(DialogTitleWithCloseIcon);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dialog, DialogContent, Box } from \"@mui/material\";\nimport withStyles from '@mui/styles/withStyles';\nimport DialogTitleWithCloseIcon from \"./DialogTitleWithCloseIcon\";\n\nconst styles = theme => ({\n  dialogPaper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    paddingBottom: theme.spacing(3),\n    maxWidth: 420\n  },\n  actions: {\n    marginTop: theme.spacing(2)\n  },\n  dialogPaperScrollPaper: {\n    maxHeight: \"none\"\n  },\n  dialogContent: {\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\n/**\n * A Wrapper around the Dialog component to create centered\n * Login, Register or other Dialogs.\n */\nfunction FormDialog(props) {\n  const {\n    classes,\n    open,\n    onClose,\n    loading,\n    headline,\n    onFormSubmit,\n    content,\n    actions,\n    hideBackdrop\n  } = props;\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      disableEscapeKeyDown={loading}\n      classes={{\n        paper: classes.dialogPaper,\n        paperScrollPaper: classes.dialogPaperScrollPaper\n      }}\n      hideBackdrop={hideBackdrop ? hideBackdrop : false}>\n      <DialogTitleWithCloseIcon\n        title={headline}\n        onClose={onClose}\n        disabled={loading}\n      />\n      <DialogContent className={classes.dialogContent}>\n        <form onSubmit={onFormSubmit}>\n          <div>{content}</div>\n          <Box width=\"100%\" className={classes.actions}>\n            {actions}\n          </Box>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nFormDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  headline: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  content: PropTypes.element.isRequired,\n  actions: PropTypes.element.isRequired,\n  hideBackdrop: PropTypes.bool.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(FormDialog);\n","import React from \"react\";\nimport { TextField } from \"@mui/material\";\nimport withTheme from \"@mui/styles/withTheme\";\n\nfunction StripeTextField(props) {\n  const { stripeOptions, StripeElement, select, theme, ...rest } = props;\n  const options = {\n    style: {\n      base: {\n        ...theme.typography.body1,\n        color: theme.palette.text.primary,\n        fontSize: \"16px\",\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: theme.palette.text.secondary,\n        },\n      },\n      invalid: {\n        iconColor: theme.palette.error.main,\n        color: theme.palette.error.main,\n      },\n    },\n    ...stripeOptions,\n  };\n  return (\n    <TextField\n      InputLabelProps={{\n        shrink: true,\n      }}\n      inputProps={{ component: StripeElement, options: options }}\n      {...rest}\n    />\n  );\n}\n\nexport default withTheme(StripeTextField);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@mui/material\";\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport StripeTextField from \"./StripeTextField\";\n\nfunction StripeCardForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName\n  } = props;\n  return (\n    <Grid container spacing={2} justifyContent=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          fullWidth\n          label=\"Credit Card\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          variant=\"outlined\"\n          required\n          StripeElement={CardElement}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeCardForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired\n};\n\nexport default StripeCardForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@mui/material\";\nimport StripeTextField from \"./StripeTextField\";\nimport { IbanElement } from \"@stripe/react-stripe-js\";\n\nfunction StripeIBANForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName,\n    email,\n    setEmail\n  } = props;\n  return (\n    <Grid container spacing={2} justifyContent=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          required\n          variant=\"outlined\"\n          fullWidth\n          value={email}\n          onChange={event => {\n            setEmail(event.target.value);\n          }}\n          type=\"email\"\n          margin=\"none\"\n          label=\"Email\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          variant=\"outlined\"\n          fullWidth\n          label=\"IBAN\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          required\n          StripeElement={IbanElement}\n          stripeOptions={{ supportedCountries: [\"SEPA\"] }}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeIBANForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  setEmail: PropTypes.func.isRequired\n};\n\nexport default StripeIBANForm;\n","import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  IbanElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { Grid, Button, Box } from \"@mui/material\";\nimport withTheme from '@mui/styles/withTheme';\nimport StripeCardForm from \"./stripe/StripeCardForm\";\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport ColoredButton from \"../../../shared/components/ColoredButton\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\n\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\n\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\n\nconst AddBalanceDialog = withTheme(function (props) {\n  const { open, theme, onClose, onSuccess } = props;\n\n  const [loading, setLoading] = useState(false);\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\n  const [stripeError, setStripeError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [amountError, setAmountError] = useState(\"\");\n  const elements = useElements();\n  const stripe = useStripe();\n\n  const onAmountChange = amount => {\n    if (amount < 0) {\n      return;\n    }\n    if (amountError) {\n      setAmountError(\"\");\n    }\n    setAmount(amount);\n  };\n\n  const getStripePaymentInfo = () => {\n    switch (paymentOption) {\n      case \"Credit Card\": {\n        return {\n          type: \"card\",\n          card: elements.getElement(CardElement),\n          billing_details: { name: name }\n        };\n      }\n      case \"SEPA Direct Debit\": {\n        return {\n          type: \"sepa_debit\",\n          sepa_debit: elements.getElement(IbanElement),\n          billing_details: { email: email, name: name }\n        };\n      }\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const renderPaymentComponent = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeCardForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                name={name}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the credit card number{\" \"}\n              <b>4242 4242 4242 4242 04 / 24 24 242 42424</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      case \"SEPA Direct Debit\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeIbanForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                setEmail={setEmail}\n                name={name}\n                email={email}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the IBAN\n              <br />\n              <b>DE89370400440532013000</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  return (\n    <FormDialog\n      open={open}\n      onClose={onClose}\n      headline=\"Add Balance\"\n      hideBackdrop={false}\n      loading={loading}\n      onFormSubmit={async event => {\n        event.preventDefault();\n        if (amount <= 0) {\n          setAmountError(\"Can't be zero\");\n          return;\n        }\n        if (stripeError) {\n          setStripeError(\"\");\n        }\n        setLoading(true);\n        const { error } = await stripe.createPaymentMethod(\n          getStripePaymentInfo()\n        );\n        if (error) {\n          setStripeError(error.message);\n          setLoading(false);\n          return;\n        }\n        onSuccess();\n      }}\n      content={\n        <Box pb={2}>\n          <Box mb={2}>\n            <Grid container spacing={1}>\n              {paymentOptions.map(option => (\n                <Grid item key={option}>\n                  <ColoredButton\n                    variant={\n                      option === paymentOption ? \"contained\" : \"outlined\"\n                    }\n                    disableElevation\n                    onClick={() => {\n                      setStripeError(\"\");\n                      setPaymentOption(option);\n                    }}\n                    color={theme.palette.common.black}\n                  >\n                    {option}\n                  </ColoredButton>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n          {renderPaymentComponent()}\n        </Box>\n      }\n      actions={\n        <Fragment>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            size=\"large\"\n            disabled={loading}\n          >\n            Pay with Stripe {loading && <ButtonCircularProgress />}\n          </Button>\n        </Fragment>\n      }\n    />\n  );\n});\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nfunction Wrapper(props) {\n  const { open, onClose, onSuccess } = props;\n  return (\n    <Elements stripe={stripePromise}>\n      {open && (\n        <AddBalanceDialog open={open} onClose={onClose} onSuccess={onSuccess} />\n      )}\n    </Elements>\n  );\n}\n\n\nWrapper.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default Wrapper;\n"],"sourceRoot":""}