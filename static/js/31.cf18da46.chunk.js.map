{"version":3,"sources":["../node_modules/react-cropper/dist/react-cropper.es.js","../node_modules/cropperjs/dist/cropper.js"],"names":["__webpack_require__","d","__webpack_exports__","l","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","cropperjs__WEBPACK_IMPORTED_MODULE_1__","cropperjs__WEBPACK_IMPORTED_MODULE_1___default","Object","assign","e","r","o","t","arguments","length","prototype","hasOwnProperty","call","apply","this","a","indexOf","getOwnPropertySymbols","propertyIsEnumerable","c","i","opacity","maxWidth","forwardRef","s","u","p","dragMode","v","src","f","style","m","className","g","crossOrigin","y","scaleX","b","scaleY","h","enable","O","zoomTo","T","rotateTo","z","alt","C","w","ready","x","onInitialized","j","M","E","useEffect","forEach","current","cropper","reset","clear","replace","currentTarget","disable","destroy","R","reduce","createElement","ref","module","exports","ownKeys","keys","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread2","obj","key","value","_toPropertyKey","defineProperty","configurable","writable","getOwnPropertyDescriptors","defineProperties","_typeof","Symbol","iterator","constructor","_defineProperties","target","props","descriptor","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","minLen","toString","slice","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","arr2","arg","input","hint","prim","toPrimitive","undefined","res","String","Number","_toPrimitive","IS_BROWSER","window","document","WINDOW","IS_TOUCH_DEVICE","documentElement","HAS_POINTER_EVENT","CLASS_CROP","concat","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_INVISIBLE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","EVENT_TOUCH_START","EVENT_TOUCH_MOVE","EVENT_TOUCH_END","EVENT_POINTER_DOWN","EVENT_POINTER_MOVE","EVENT_POINTER_UP","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","DEFAULTS","viewMode","initialAspectRatio","NaN","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","cropstart","cropmove","cropend","crop","zoom","isNaN","isNumber","isPositiveNumber","Infinity","isUndefined","isObject","isPlainObject","_constructor","error","isFunction","toArray","callback","_len","args","_key","REGEXP_DECIMALS","normalizeDecimalNumber","times","Math","round","REGEXP_SUFFIX","setStyle","element","styles","property","addClass","elem","classList","add","trim","removeClass","remove","toggleClass","added","REGEXP_CAMEL_CASE","toParamCase","toLowerCase","getData","dataset","getAttribute","setData","setAttribute","REGEXP_SPACES","onceSupported","supported","once","listener","options","get","set","addEventListener","removeEventListener","removeListener","type","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","location","REGEXP_ORIGINS","isCrossOriginURL","url","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","rotate","translateX","translateY","values","transform","join","WebkitTransform","msTransform","getPointer","_ref2","endOnly","pageX","pageY","end","endX","endY","startX","startY","getAdjustedSizes","_ref4","height","width","isValidWidth","isValidHeight","adjustedWidth","fromCharCode","REGEXP_DATA_URL_HEAD","resetAndGetOrientation","arrayBuffer","orientation","dataView","DataView","littleEndian","app1Start","ifdStart","getUint8","byteLength","offset","exifIDCode","tiffOffset","start","str","getStringFromCharCode","endianness","getUint16","firstIFDOffset","getUint32","_offset","_length","setUint16","render","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","minWidth","minHeight","containerData","max","offsetWidth","offsetHeight","imageData","rotated","abs","naturalWidth","naturalHeight","canvasWidth","canvasHeight","canvasData","limited","limitCanvas","min","maxHeight","oldLeft","oldTop","initialCanvasData","sizeLimited","positionLimited","cropBoxData","_getAdjustedSizes","newCanvasLeft","newCanvasTop","minLeft","minTop","maxLeft","maxTop","changed","transformed","_getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getRotatedSizes","canvas","renderImage","limitCropBox","image","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","initPreview","crossOriginUrl","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","resetPreview","removeAttribute","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","getElementsByTagName","events","bind","onCropStart","cropStart","onWheel","wheel","passive","capture","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","handlers","ratioX","ratioY","getCanvasData","getCropBoxData","setCanvasData","setCropBoxData","setDragMode","dragBox","contains","_this","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","buttons","button","pointerType","ctrlKey","action","pointers","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","right","bottom","renderable","shiftKey","pointer","range","check","side","move","pointers2","maxRatio","pointer2","x1","y1","x2","y2","z1","sqrt","getMaxZoomRatio","methods","initialImageData","hasSameSize","isImg","replaced","uncreate","load","originalUrl","offsetX","offsetY","_this$canvasData","moveTo","_originalEvent","pivot","oldRatio","count","_ref3","getPointersCenter","_scaleX","scale","_scaleY","rounded","getContainerData","getImageData","sized","widthChanged","heightChanged","getCroppedCanvas","HTMLCanvasElement","source","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","_ref8$maxHeight","_ref8$minWidth","_ref8$minHeight","context","getContext","maxSizes","minSizes","destMaxSizes","destMinSizes","destWidth","destHeight","params","fillStyle","fillRect","save","translate","drawImage","map","param","floor","getSourceCanvas","_this$getData","initialX","initialY","initialWidth","initialHeight","_options$imageSmoothi","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","sourceWidth","sourceHeight","srcX","srcY","setAspectRatio","mode","croppable","AnotherCropper","Cropper","instance","Constructor","_classCallCheck","tagName","Error","reloading","sizing","init","staticProps","protoProps","toDataURL","ArrayBuffer","read","dataURL","base64","binary","atob","uint8","Uint8Array","charCodeAt","dataURLToArrayBuffer","clone","xhr","XMLHttpRequest","onabort","onerror","ontimeout","onprogress","getResponseHeader","abort","onload","response","onloadend","open","responseType","withCredentials","send","mimeType","chunks","subarray","btoa","arrayBufferToDataURL","_parseOrientation","parseOrientation","stop","parentNode","insertBefore","nextSibling","_this2","isIOSWebKit","navigator","userAgent","done","build","sizingImage","body","removeChild","template","getElementsByClassName","unbuild","factory"],"mappings":"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","file":"static/js/31.cf18da46.chunk.js","sourcesContent":["import e, { useRef as r, useEffect as o } from \"react\";\nimport t from \"cropperjs\";\nvar n = function () {\n  return n = Object.assign || function (e) {\n    for (var r, o = 1, t = arguments.length; o < t; o++) for (var n in r = arguments[o]) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n    return e;\n  }, n.apply(this, arguments);\n};\nfunction a(e, r) {\n  var o = {};\n  for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && r.indexOf(t) < 0 && (o[t] = e[t]);\n  if (null != e && \"function\" == typeof Object.getOwnPropertySymbols) {\n    var n = 0;\n    for (t = Object.getOwnPropertySymbols(e); n < t.length; n++) r.indexOf(t[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e, t[n]) && (o[t[n]] = e[t[n]]);\n  }\n  return o;\n}\nvar c = [\"aspectRatio\", \"autoCrop\", \"autoCropArea\", \"background\", \"center\", \"checkCrossOrigin\", \"checkOrientation\", \"cropBoxMovable\", \"cropBoxResizable\", \"data\", \"dragMode\", \"guides\", \"highlight\", \"initialAspectRatio\", \"minCanvasHeight\", \"minCanvasWidth\", \"minContainerHeight\", \"minContainerWidth\", \"minCropBoxHeight\", \"minCropBoxWidth\", \"modal\", \"movable\", \"preview\", \"responsive\", \"restore\", \"rotatable\", \"scalable\", \"toggleDragModeOnDblclick\", \"viewMode\", \"wheelZoomRatio\", \"zoomOnTouch\", \"zoomOnWheel\", \"zoomable\", \"cropstart\", \"cropmove\", \"cropend\", \"crop\", \"zoom\", \"ready\"],\n  i = {\n    opacity: 0,\n    maxWidth: \"100%\"\n  },\n  l = e.forwardRef(function (l, s) {\n    var u = a(l, []),\n      p = u.dragMode,\n      d = void 0 === p ? \"crop\" : p,\n      v = u.src,\n      f = u.style,\n      m = u.className,\n      g = u.crossOrigin,\n      y = u.scaleX,\n      b = u.scaleY,\n      h = u.enable,\n      O = u.zoomTo,\n      T = u.rotateTo,\n      z = u.alt,\n      C = void 0 === z ? \"picture\" : z,\n      w = u.ready,\n      x = u.onInitialized,\n      j = a(u, [\"dragMode\", \"src\", \"style\", \"className\", \"crossOrigin\", \"scaleX\", \"scaleY\", \"enable\", \"zoomTo\", \"rotateTo\", \"alt\", \"ready\", \"onInitialized\"]),\n      M = {\n        scaleY: b,\n        scaleX: y,\n        enable: h,\n        zoomTo: O,\n        rotateTo: T\n      },\n      E = function () {\n        for (var o = [], t = 0; t < arguments.length; t++) o[t] = arguments[t];\n        var n = r(null);\n        return e.useEffect(function () {\n          o.forEach(function (e) {\n            e && (\"function\" == typeof e ? e(n.current) : e.current = n.current);\n          });\n        }, [o]), n;\n      }(s, r(null));\n    o(function () {\n      var e;\n      (null === (e = E.current) || void 0 === e ? void 0 : e.cropper) && \"number\" == typeof O && E.current.cropper.zoomTo(O);\n    }, [u.zoomTo]), o(function () {\n      var e;\n      (null === (e = E.current) || void 0 === e ? void 0 : e.cropper) && void 0 !== v && E.current.cropper.reset().clear().replace(v);\n    }, [v]), o(function () {\n      if (null !== E.current) {\n        var e = new t(E.current, n(n({\n          dragMode: d\n        }, j), {\n          ready: function (e) {\n            null !== e.currentTarget && function (e, r) {\n              void 0 === r && (r = {});\n              var o = r.enable,\n                t = void 0 === o || o,\n                n = r.scaleX,\n                a = void 0 === n ? 1 : n,\n                c = r.scaleY,\n                i = void 0 === c ? 1 : c,\n                l = r.zoomTo,\n                s = void 0 === l ? 0 : l,\n                u = r.rotateTo;\n              t ? e.enable() : e.disable(), e.scaleX(a), e.scaleY(i), void 0 !== u && e.rotateTo(u), s > 0 && e.zoomTo(s);\n            }(e.currentTarget.cropper, M), w && w(e);\n          }\n        }));\n        x && x(e);\n      }\n      return function () {\n        var e, r;\n        null === (r = null === (e = E.current) || void 0 === e ? void 0 : e.cropper) || void 0 === r || r.destroy();\n      };\n    }, [E]);\n    var R = function (e) {\n      return c.reduce(function (e, r) {\n        var o = e,\n          t = r;\n        return o[t], a(o, [\"symbol\" == typeof t ? t : t + \"\"]);\n      }, e);\n    }(n(n({}, j), {\n      crossOrigin: g,\n      src: v,\n      alt: C\n    }));\n    return e.createElement(\"div\", {\n      style: f,\n      className: m\n    }, e.createElement(\"img\", n({}, R, {\n      style: i,\n      ref: E\n    })));\n  });\nexport { l as Cropper, l as default };","/*!\n * Cropper.js v1.6.1\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2023-09-17T03:44:19.860Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Cropper = factory());\n})(this, function () {\n  'use strict';\n\n  function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(e);\n      r && (o = o.filter(function (r) {\n        return Object.getOwnPropertyDescriptor(e, r).enumerable;\n      })), t.push.apply(t, o);\n    }\n    return t;\n  }\n  function _objectSpread2(e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = null != arguments[r] ? arguments[r] : {};\n      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n        _defineProperty(e, r, t[r]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n      });\n    }\n    return e;\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n  }\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  var WINDOW = IS_BROWSER ? window : {};\n  var IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? 'ontouchstart' in WINDOW.document.documentElement : false;\n  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n  var NAMESPACE = 'cropper';\n\n  // Actions\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n\n  // Classes\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\");\n\n  // Data keys\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\");\n\n  // Drag modes\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none';\n\n  // Events\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel';\n  var EVENT_ZOOM = 'zoom';\n\n  // Mime types\n  var MIME_TYPE_JPEG = 'image/jpeg';\n\n  // RegExps\n  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^img|canvas$/i;\n\n  // Misc\n  // Inspired by the default width and height of a canvas element.\n  var MIN_CONTAINER_WIDTH = 200;\n  var MIN_CONTAINER_HEIGHT = 100;\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: MIN_CONTAINER_WIDTH,\n    minContainerHeight: MIN_CONTAINER_HEIGHT,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  /**\n   * Check if the given value is not a number.\n   */\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  /**\n   * Check if the given value is a positive number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n   */\n  var isPositiveNumber = function isPositiveNumber(value) {\n    return value > 0 && value < Infinity;\n  };\n\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n  function isObject(value) {\n    return _typeof(value) === 'object' && value !== null;\n  }\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  var slice = Array.prototype.slice;\n\n  /**\n   * Convert array-like or iterable object to an array.\n   * @param {*} value - The value to convert.\n   * @returns {Array} Returns a new array.\n   */\n  function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n  }\n\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length) /* array-like */) {\n        toArray(data).forEach(function (value, key) {\n          callback.call(data, value, key, data);\n        });\n      } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Extend the given object.\n   * @param {*} target - The target object to extend.\n   * @param {*} args - The rest objects for merging to the target object.\n   * @returns {Object} The extended object.\n   */\n  var assign = Object.assign || function assign(target) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (isObject(target) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            target[key] = arg[key];\n          });\n        }\n      });\n    }\n    return target;\n  };\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n\n  /**\n   * Normalize decimal number.\n   * Check out {@link https://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n  function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value = \"\".concat(value, \"px\");\n      }\n      style[property] = value;\n    });\n  }\n\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n    var className = element.className.trim();\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = \"\".concat(className, \" \").concat(value);\n    }\n  }\n\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    }\n\n    // IE10-11 doesn't support the second parameter of `classList.toggle`\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n  var REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n  function toParamCase(value) {\n    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n  }\n\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    }\n    if (element.dataset) {\n      return element.dataset[name];\n    }\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\n  }\n\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n    }\n  }\n\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (error) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (error) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute(\"data-\".concat(toParamCase(name)));\n    }\n  }\n  var REGEXP_SPACES = /\\s\\s*/;\n  var onceSupported = function () {\n    var supported = false;\n    if (IS_BROWSER) {\n      var once = false;\n      var listener = function listener() {};\n      var options = Object.defineProperty({}, 'once', {\n        get: function get() {\n          supported = true;\n          return once;\n        },\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set(value) {\n          once = value;\n        }\n      });\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n    return supported;\n  }();\n\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n      element.removeEventListener(event, handler, options);\n    });\n  }\n\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n          listeners = _element$listeners === void 0 ? {} : _element$listeners;\n        _handler = function handler() {\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n          listener.apply(element, args);\n        };\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n      element.addEventListener(event, _handler, options);\n    });\n  }\n\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n  function dispatchEvent(element, type, data) {\n    var event;\n\n    // Event and CustomEvent on IE9-11 are global objects, not constructors\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n    return element.dispatchEvent(event);\n  }\n\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n  var location = WINDOW.location;\n  var REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n  function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n      scaleX = _ref.scaleX,\n      scaleY = _ref.scaleY,\n      translateX = _ref.translateX,\n      translateY = _ref.translateY;\n    var values = [];\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\n    }\n\n    // Rotate should come first before scale to match orientation transform\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n    var transform = values.length ? values.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = _objectSpread2({}, pointers);\n    var maxRatio = 0;\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n        if (Math.abs(ratio) > Math.abs(maxRatio)) {\n          maxRatio = ratio;\n        }\n      });\n    });\n    return maxRatio;\n  }\n\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n      pageY = _ref2.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n    return endOnly ? end : _objectSpread2({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n        startY = _ref3.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n  function getAdjustedSizes(_ref4) {\n    var aspectRatio = _ref4.aspectRatio,\n      height = _ref4.height,\n      width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n    var isValidWidth = isPositiveNumber(width);\n    var isValidHeight = isPositiveNumber(height);\n    if (isValidWidth && isValidHeight) {\n      var adjustedWidth = height * aspectRatio;\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidWidth) {\n      height = width / aspectRatio;\n    } else if (isValidHeight) {\n      width = height * aspectRatio;\n    }\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n      height = _ref5.height,\n      degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n      imageNaturalWidth = _ref6.naturalWidth,\n      imageNaturalHeight = _ref6.naturalHeight,\n      _ref6$rotate = _ref6.rotate,\n      rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n      _ref6$scaleX = _ref6.scaleX,\n      scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n      _ref6$scaleY = _ref6.scaleY,\n      scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n      naturalWidth = _ref7.naturalWidth,\n      naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n      fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n      _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n      imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n      _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n      imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n      _ref8$maxWidth = _ref8.maxWidth,\n      maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n      _ref8$maxHeight = _ref8.maxHeight,\n      maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n      _ref8$minWidth = _ref8.minWidth,\n      minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n      _ref8$minHeight = _ref8.minHeight,\n      minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight));\n\n    // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n  }\n  var fromCharCode = String.fromCharCode;\n\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    length += start;\n    for (var i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n    return str;\n  }\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n  }\n\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = [];\n\n    // Chunk Typed Array for better performance (#435)\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n    while (uint8.length > 0) {\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n      // eslint-disable-next-line prefer-spread\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation;\n\n    // Ignores range error when the image does not have correct Exif information\n    try {\n      var littleEndian;\n      var app1Start;\n      var ifdStart;\n\n      // Only handle JPEG image (start by 0xFFD8)\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n        var length = dataView.byteLength;\n        var offset = 2;\n        while (offset + 1 < length) {\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n            app1Start = offset;\n            break;\n          }\n          offset += 1;\n        }\n      }\n      if (app1Start) {\n        var exifIDCode = app1Start + 4;\n        var tiffOffset = app1Start + 10;\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n          var endianness = dataView.getUint16(tiffOffset);\n          littleEndian = endianness === 0x4949;\n          if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n        }\n      }\n      if (ifdStart) {\n        var _length = dataView.getUint16(ifdStart, littleEndian);\n        var _offset;\n        var i;\n        for (i = 0; i < _length; i += 1) {\n          _offset = ifdStart + i * 12 + 2;\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112 /* Orientation */) {\n            // 8 is the offset of the current tag's value\n            _offset += 8;\n\n            // Get the original orientation value\n            orientation = dataView.getUint16(_offset, littleEndian);\n\n            // Override the orientation with its default value\n            dataView.setUint16(_offset, 1, littleEndian);\n            break;\n          }\n        }\n      }\n    } catch (error) {\n      orientation = 1;\n    }\n    return orientation;\n  }\n\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n\n      // Rotate left 180°\n      case 3:\n        rotate = -180;\n        break;\n\n      // Flip vertical\n      case 4:\n        scaleY = -1;\n        break;\n\n      // Flip vertical and rotate right 90°\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n\n      // Rotate right 90°\n      case 6:\n        rotate = 90;\n        break;\n\n      // Flip horizontal and rotate right 90°\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n\n      // Rotate left 90°\n      case 8:\n        rotate = -90;\n        break;\n    }\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n        options = this.options,\n        container = this.container,\n        cropper = this.cropper;\n      var minWidth = Number(options.minContainerWidth);\n      var minHeight = Number(options.minContainerHeight);\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      var containerData = {\n        width: Math.max(container.offsetWidth, minWidth >= 0 ? minWidth : MIN_CONTAINER_WIDTH),\n        height: Math.max(container.offsetHeight, minHeight >= 0 ? minHeight : MIN_CONTAINER_HEIGHT)\n      };\n      this.containerData = containerData;\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n        imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      canvasData.left = (containerData.width - canvasData.width) / 2;\n      canvasData.top = (containerData.height - canvasData.height) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n        containerData = this.containerData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropped = this.cropped && cropBoxData;\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n      if (positionLimited) {\n        if (viewMode > (cropped ? 0 : 1)) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n        imageData = this.imageData;\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n            width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n            height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n            degree: imageData.rotate || 0\n          }),\n          naturalWidth = _getRotatedSizes.width,\n          naturalHeight = _getRotatedSizes.height;\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      this.limitCanvas(false, true);\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      this.renderImage(changed);\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n        imageData = this.imageData;\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n        canvasData = this.canvasData;\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n      // The width/height of auto crop area must large than \"minWidth/Height\"\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n        containerData = this.containerData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData,\n        limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height;\n\n        // The min/maxCropBoxWidth/Height must be less than container's width/height\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n        containerData = this.containerData,\n        cropBoxData = this.cropBoxData;\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      this.limitCropBox(false, true);\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n  var preview = {\n    initPreview: function initPreview() {\n      var element = this.element,\n        crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var alt = element.alt || 'The image to preview';\n      var image = document.createElement('img');\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n      image.src = url;\n      image.alt = alt;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n      if (!preview) {\n        return;\n      }\n      var previews = preview;\n      if (typeof preview === 'string') {\n        previews = element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n      this.previews = previews;\n      forEach(previews, function (el) {\n        var img = document.createElement('img');\n\n        // Save the original size for recover\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n        img.src = url;\n        img.alt = alt;\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n        cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n        height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n        options = this.options,\n        cropper = this.cropper;\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n          passive: false,\n          capture: true\n        });\n      }\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n        options = this.options,\n        cropper = this.cropper;\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel, {\n          passive: false,\n          capture: true\n        });\n      }\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n  var handlers = {\n    resize: function resize() {\n      if (this.disabled) {\n        return;\n      }\n      var options = this.options,\n        container = this.container,\n        containerData = this.containerData;\n      var ratioX = container.offsetWidth / containerData.width;\n      var ratioY = container.offsetHeight / containerData.height;\n      var ratio = Math.abs(ratioX - 1) > Math.abs(ratioY - 1) ? ratioX : ratioY;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1) {\n        var canvasData;\n        var cropBoxData;\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n        this.render();\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(event) {\n      var _this = this;\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n      if (this.disabled) {\n        return;\n      }\n      event.preventDefault();\n\n      // Limit wheel speed to prevent zoom too fast (#21)\n      if (this.wheeling) {\n        return;\n      }\n      this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n      if (event.deltaY) {\n        delta = event.deltaY > 0 ? 1 : -1;\n      } else if (event.wheelDelta) {\n        delta = -event.wheelDelta / 120;\n      } else if (event.detail) {\n        delta = event.detail > 0 ? 1 : -1;\n      }\n      this.zoom(-delta * ratio, event);\n    },\n    cropStart: function cropStart(event) {\n      var buttons = event.buttons,\n        button = event.button;\n      if (this.disabled\n\n      // Handle mouse event and pointer event and ignore touch event\n      || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && (\n      // No primary button (Usually the left button)\n      isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0\n\n      // Open context menu\n      || event.ctrlKey)) {\n        return;\n      }\n      var options = this.options,\n        pointers = this.pointers;\n      var action;\n      if (event.changedTouches) {\n        // Handle touch event\n        forEach(event.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[event.pointerId || 0] = getPointer(event);\n      }\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(event.target, DATA_ACTION);\n      }\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      // This line is required for preventing page zooming in iOS browsers\n      event.preventDefault();\n      this.action = action;\n      this.cropping = false;\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(event) {\n      var action = this.action;\n      if (this.disabled || !action) {\n        return;\n      }\n      var pointers = this.pointers;\n      event.preventDefault();\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      }\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          // The first parameter should not be undefined (#432)\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\n      }\n      this.change(event);\n    },\n    cropEnd: function cropEnd(event) {\n      if (this.disabled) {\n        return;\n      }\n      var action = this.action,\n        pointers = this.pointers;\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[event.pointerId || 0];\n      }\n      if (!action) {\n        return;\n      }\n      event.preventDefault();\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: event,\n        action: action\n      });\n    }\n  };\n  var change = {\n    change: function change(event) {\n      var options = this.options,\n        canvasData = this.canvasData,\n        containerData = this.containerData,\n        cropBoxData = this.cropBoxData,\n        pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n        top = cropBoxData.top,\n        width = cropBoxData.width,\n        height = cropBoxData.height;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key\n      if (!aspectRatio && event.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n            break;\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n            break;\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n            break;\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n            break;\n        }\n      };\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n          check(ACTION_EAST);\n          width += range.x;\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n          break;\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n          break;\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n          break;\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n          check(ACTION_SOUTH);\n          height += range.y;\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n          break;\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n          break;\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n          break;\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n          break;\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), event);\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n          break;\n      }\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      }\n\n      // Override\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n      return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n      return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true);\n\n        // Render canvas after crop box rendered\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n      return this;\n    },\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n      return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n      return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n      return this;\n    },\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n      if (!element[NAMESPACE]) {\n        return this;\n      }\n      element[NAMESPACE] = undefined;\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n      this.uncreate();\n      return this;\n    },\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _this$canvasData = this.canvasData,\n        left = _this$canvasData.left,\n        top = _this$canvasData.top;\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n      var changed = false;\n      x = Number(x);\n      y = Number(y);\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n      return this;\n    },\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n      ratio = Number(ratio);\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n        canvasData = this.canvasData;\n      var width = canvasData.width,\n        height = canvasData.height,\n        naturalWidth = canvasData.naturalWidth,\n        naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n        if (_originalEvent) {\n          var pointers = this.pointers;\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          };\n\n          // Zoom from the triggering point of the event\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n      return this;\n    },\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n      return this;\n    },\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n      var transformed = false;\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n      return this;\n    },\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n        imageData = this.imageData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData;\n      var data;\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        var ratio = imageData.width / imageData.naturalWidth;\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n      return data;\n    },\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData(data) {\n      var options = this.options,\n        imageData = this.imageData,\n        canvasData = this.canvasData;\n      var cropBoxData = {};\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n        var ratio = imageData.width / imageData.naturalWidth;\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n        this.setCropBoxData(cropBoxData);\n      }\n      return this;\n    },\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n      var data = {};\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n      return data;\n    },\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n        this.renderCanvas(true);\n      }\n      return this;\n    },\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n      var data;\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n      return data || {};\n    },\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n        this.renderCropBox();\n      }\n      return this;\n    },\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n      var canvasData = this.canvasData;\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options);\n\n      // Returns the source canvas if it is not cropped.\n      if (!this.cropped) {\n        return source;\n      }\n      var _this$getData = this.getData(options.rounded),\n        initialX = _this$getData.x,\n        initialY = _this$getData.y,\n        initialWidth = _this$getData.width,\n        initialHeight = _this$getData.height;\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n      var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: options.width || (ratio !== 1 ? source.width : initialWidth),\n          height: options.height || (ratio !== 1 ? source.height : initialHeight)\n        }),\n        width = _getAdjustedSizes.width,\n        height = _getAdjustedSizes.height;\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n        imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\n        imageSmoothingQuality = options.imageSmoothingQuality;\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      var sourceWidth = source.width;\n      var sourceHeight = source.height;\n\n      // Source canvas parameters\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth;\n      var srcHeight;\n\n      // Destination canvas parameters\n      var dstX;\n      var dstY;\n      var dstWidth;\n      var dstHeight;\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n      var params = [srcX, srcY, srcWidth, srcHeight];\n\n      // Avoid \"IndexSizeError\"\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      }\n\n      // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n      return canvas;\n    },\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n        if (this.ready) {\n          this.initCropBox();\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n      return this;\n    },\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n        dragBox = this.dragBox,\n        face = this.face;\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n      return this;\n    }\n  };\n  var AnotherCropper = WINDOW.Cropper;\n  var Cropper = /*#__PURE__*/function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _classCallCheck(this, Cropper);\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n    _createClass(Cropper, [{\n      key: \"init\",\n      value: function init() {\n        var element = this.element;\n        var tagName = element.tagName.toLowerCase();\n        var url;\n        if (element[NAMESPACE]) {\n          return;\n        }\n        element[NAMESPACE] = this;\n        if (tagName === 'img') {\n          this.isImg = true;\n\n          // e.g.: \"img/picture.jpg\"\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url;\n\n          // Stop when it's a blank image\n          if (!url) {\n            return;\n          }\n\n          // e.g.: \"https://example.com/img/picture.jpg\"\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n        this.load(url);\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        var _this = this;\n        if (!url) {\n          return;\n        }\n        this.url = url;\n        this.imageData = {};\n        var element = this.element,\n          options = this.options;\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        }\n\n        // Only IE10+ supports Typed Arrays\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        }\n\n        // Detect the mime type of the image directly if it is a Data URL\n        if (REGEXP_DATA_URL.test(url)) {\n          // Read ArrayBuffer from Data URL of JPEG images directly for better performance\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            this.read(dataURLToArrayBuffer(url));\n          } else {\n            // Only a JPEG image may contains Exif Orientation information,\n            // the rest types of Data URLs are not necessary to check orientation at all.\n            this.clone();\n          }\n          return;\n        }\n\n        // 1. Detect the mime type of the image by a XMLHttpRequest.\n        // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.\n        var xhr = new XMLHttpRequest();\n        var clone = this.clone.bind(this);\n        this.reloading = true;\n        this.xhr = xhr;\n\n        // 1. Cross origin requests are only supported for protocol schemes:\n        // http, https, data, chrome, chrome-extension.\n        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\n        // in some browsers as IE11 and Safari.\n        xhr.onabort = clone;\n        xhr.onerror = clone;\n        xhr.ontimeout = clone;\n        xhr.onprogress = function () {\n          // Abort the request directly if it not a JPEG image for better performance\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\n            xhr.abort();\n          }\n        };\n        xhr.onload = function () {\n          _this.read(xhr.response);\n        };\n        xhr.onloadend = function () {\n          _this.reloading = false;\n          _this.xhr = null;\n        };\n\n        // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        // The third parameter is required for avoiding side-effect (#682)\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: \"read\",\n      value: function read(arrayBuffer) {\n        var options = this.options,\n          imageData = this.imageData;\n\n        // Reset the orientation value to its default value 1\n        // as some iOS browsers will render image with its orientation\n        var orientation = resetAndGetOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n        if (orientation > 1) {\n          // Generate a new URL which has the default orientation value\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n          var _parseOrientation = parseOrientation(orientation);\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n        this.clone();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var element = this.element,\n          url = this.url;\n        var crossOrigin = element.crossOrigin;\n        var crossOriginUrl = url;\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          if (!crossOrigin) {\n            crossOrigin = 'anonymous';\n          }\n\n          // Bust cache when there is not a \"crossOrigin\" property (#519)\n          crossOriginUrl = addTimestamp(url);\n        }\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n        var image = document.createElement('img');\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n        image.src = crossOriginUrl || url;\n        image.alt = element.alt || 'The image to crop';\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true;\n\n        // Match all browsers that use WebKit as the layout engine in iOS devices,\n        // such as Safari for iOS, Chrome for iOS, and in-app browsers.\n        var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.initialImageData = assign({}, _this2.imageData);\n          _this2.sizing = false;\n          _this2.sized = true;\n          _this2.build();\n        };\n\n        // Most modern browsers (excepts iOS WebKit)\n        if (image.naturalWidth && !isIOSWebKit) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n        this.sizingImage = sizingImage;\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n          if (!isIOSWebKit) {\n            body.removeChild(sizingImage);\n          }\n        };\n        sizingImage.src = image.src;\n\n        // iOS WebKit will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n        if (!isIOSWebKit) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: \"build\",\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n        var element = this.element,\n          options = this.options,\n          image = this.image;\n\n        // Create cropper elements\n        var container = element.parentNode;\n        var template = document.createElement('div');\n        template.innerHTML = TEMPLATE;\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n        this.face = face;\n        canvas.appendChild(image);\n\n        // Hide the original image\n        addClass(element, CLASS_HIDDEN);\n\n        // Inserts the cropper after to the current image\n        container.insertBefore(cropper, element.nextSibling);\n\n        // Show the hidden image\n        removeClass(image, CLASS_HIDE);\n        this.initPreview();\n        this.bind();\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        addClass(cropBox, CLASS_HIDDEN);\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n        }\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n        }\n        if (options.background) {\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n        }\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n        }\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n        if (options.autoCrop) {\n          this.crop();\n        }\n        this.setData(options.data);\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: \"unbuild\",\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        var parentNode = this.cropper.parentNode;\n        if (parentNode) {\n          parentNode.removeChild(this.cropper);\n        }\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: \"uncreate\",\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.onabort = null;\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n    return Cropper;\n  }();\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n  return Cropper;\n});"],"sourceRoot":""}