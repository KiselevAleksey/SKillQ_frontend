{"version":3,"sources":["shared/components/ColoredButton.js","shared/components/Dropzone.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_mui_material__WEBPACK_IMPORTED_MODULE_1__","_mui_material__WEBPACK_IMPORTED_MODULE_2__","_mui_material__WEBPACK_IMPORTED_MODULE_3__","_mui_material__WEBPACK_IMPORTED_MODULE_4__","_mui_material__WEBPACK_IMPORTED_MODULE_5__","memo","props","color","children","theme","buttonTheme","createTheme","adaptV4Theme","palette","primary","main","buttonProps","_ref","o","React","createElement","StyledEngineProvider","injectFirst","ThemeProvider","Button","Object","assign","r","__webpack_exports__","react_dropzone__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","_mui_styles_withStyles__WEBPACK_IMPORTED_MODULE_4__","_ColoredButton__WEBPACK_IMPORTED_MODULE_5__","getColor","isDragAccept","isDragReject","success","error","dark","common","black","withStyles","button","borderWidth","borderColor","borderTopLeftRadius","borderBottomLeftRadius","fullHeight","height","withTheme","onDrop","accept","classes","style","getRootProps","getInputProps","useDropzone","Box","ColoredButton","fullWidth","className","classNames","variant"],"mappings":"2FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,KAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KA8BeQ,mBA1Bf,SAAuBC,GACrB,MAAMC,MAAEA,EAAKC,SAAEA,EAAQC,MAAEA,GAAUH,EAC7BI,EAAcC,YAAYC,YAAa,IACxCH,EACHI,QAAS,CACPC,QAAS,CACPC,KAAMR,OAINS,EAAc,CAACC,IAAA,IAACV,MAAEA,EAAKE,MAAEA,EAAKD,SAAEA,KAAaU,GAAGD,EAAA,OAAKC,GAAvC,CAA0CZ,GAC9D,OACEa,IAAAC,cAACC,IAAoB,CAACC,aAAW,GAC/BH,IAAAC,cAACG,IAAa,CAACd,MAAOC,GACpBS,IAAAC,cAACI,IAAMC,OAAAC,OAAA,GAAKV,EAAW,CAAET,MAAM,YAC5BC,yCCnBXX,EAAA8B,EAAAC,GAAA,IAAAhC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAiC,EAAAhC,EAAA,KAAAiC,EAAAjC,EAAA,KAAAkC,EAAAlC,EAAAE,EAAA+B,GAAA5B,EAAAL,EAAA,KAAAmC,EAAAnC,EAAA,KAAAoC,EAAApC,EAAA,KAoBA,SAASqC,EAASC,EAAcC,EAAc3B,GAC5C,OAAI0B,EACK1B,EAAMI,QAAQwB,QAAQtB,KAE3BqB,EACK3B,EAAMI,QAAQyB,MAAMC,KAEtB9B,EAAMI,QAAQ2B,OAAOC,MA2CfC,sBA9DA,CACbC,OAAQ,CACNC,YAAa,EACbC,YAAa,sBACbC,oBAAqB,EACrBC,uBAAwB,GAE1BC,WAAY,CACVC,OAAQ,SAsDsB,CAAEC,WAAW,GAAhCR,CAxCf,SAAkBpC,GAChB,MAAM6C,OAAEA,EAAMC,OAAEA,EAAMJ,WAAEA,EAAUxC,SAAEA,EAAQ6C,QAAEA,EAAOC,MAAEA,EAAK7C,MAAEA,GAAUH,GAClEiD,aACJA,EAAYC,cACZA,EAAarB,aACbA,EAAYC,aACZA,GACEqB,YAAY,CACdL,OAAQA,EACRD,OAAQA,IAEV,OACEhC,IAAAC,cAACsC,IAAGjC,OAAAC,OAAA,GAAK6B,IAAc,CAAEN,OAAO,SAC9B9B,IAAAC,cAAA,QAAWoC,KACXrC,IAAAC,cAACuC,IAAa,CACZC,WAAS,EACTC,UAAWC,IACTd,EAAaK,EAAQL,WAAa,KAClCK,EAAQV,QAEVoB,QAAQ,WACRxD,MAAO2B,EAASC,EAAcC,EAAc3B,GAC5C6C,MAAOA,GAEN9C","file":"static/js/26.722dc2b0.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createTheme, ThemeProvider, StyledEngineProvider, adaptV4Theme } from \"@mui/material\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createTheme(adaptV4Theme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  }));\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={buttonTheme}>\n        <Button {...buttonProps} color=\"primary\">\n          {children}\n        </Button>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport classNames from \"classnames\";\nimport { Box } from \"@mui/material\";\nimport withStyles from '@mui/styles/withStyles';\nimport ColoredButton from \"./ColoredButton\";\n\nconst styles = {\n  button: {\n    borderWidth: 1,\n    borderColor: \"rgba(0, 0, 0, 0.23)\",\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  },\n  fullHeight: {\n    height: \"100%\"\n  }\n};\n\nfunction getColor(isDragAccept, isDragReject, theme) {\n  if (isDragAccept) {\n    return theme.palette.success.main;\n  }\n  if (isDragReject) {\n    return theme.palette.error.dark;\n  }\n  return theme.palette.common.black;\n}\n\nfunction Dropzone(props) {\n  const { onDrop, accept, fullHeight, children, classes, style, theme } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    onDrop: onDrop\n  });\n  return (\n    <Box {...getRootProps()} height=\"100%\">\n      <input {...getInputProps()} />\n      <ColoredButton\n        fullWidth\n        className={classNames(\n          fullHeight ? classes.fullHeight : null,\n          classes.button\n        )}\n        variant=\"outlined\"\n        color={getColor(isDragAccept, isDragReject, theme)}\n        style={style}\n      >\n        {children}\n      </ColoredButton>\n    </Box>\n  );\n}\n\nDropzone.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  onDrop: PropTypes.func,\n  accept: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\n\nexport default withStyles(styles, { withTheme: true })(Dropzone);\n"],"sourceRoot":""}